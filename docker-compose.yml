services:
  
  order-service:
      build:
        context: .
        dockerfile: Dockerfile
      container_name: order_service
      depends_on:
        postgres:
          condition: service_healthy
        kafka:
          condition: service_healthy 
      env_file: .env
      ports:
        - "8080:8080"
      restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
    - "9092:9092"  # ← Для внутренней Docker сети
    - "9093:9093"  # ← Для доступа с хоста
    environment:
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true" 
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168 
      KAFKA_LOG_RETENTION_BYTES: 1073741824  
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5430:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
      - ./internal/migrations:/docker-entrypoint-initdb.d:ro
    command: >
      postgres -c max_connections=1000
              -c shared_buffers=256MB
              -c effective_cache_size=768MB
              -c maintenance_work_mem=64MB
              -c checkpoint_completion_target=0.7
              -c wal_buffers=16MB
              -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U order_user -d order_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  pgdata:
    driver: local